
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000ec0  00000f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800130  00800130  00000f84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001010  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4e  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00003d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 97 04 	call	0x92e	; 0x92e <main>
  9e:	0c 94 5e 07 	jmp	0xebc	; 0xebc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configMODE>:
		break;
	}
}
	
void updateDutyCycle1B(uint16_t dutycycle){
	OCR1B = dutycycle;
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	84 61       	ori	r24, 0x14	; 20
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	84 b9       	out	0x04, r24	; 4
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	84 b9       	out	0x04, r24	; 4
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	84 b9       	out	0x04, r24	; 4
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	85 b9       	out	0x05, r24	; 5
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	e8 e6       	ldi	r30, 0x68	; 104
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
  ea:	90 81       	ld	r25, Z
  ec:	94 60       	ori	r25, 0x04	; 4
  ee:	90 83       	st	Z, r25
  f0:	eb e6       	ldi	r30, 0x6B	; 107
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	97 60       	ori	r25, 0x07	; 7
  f8:	90 83       	st	Z, r25
  fa:	ed e6       	ldi	r30, 0x6D	; 109
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	90 68       	ori	r25, 0x80	; 128
 102:	90 83       	st	Z, r25
 104:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <state>
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	94 60       	ori	r25, 0x04	; 4
 10c:	9b b9       	out	0x0b, r25	; 11
 10e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <stateEEPROM>
 112:	84 b1       	in	r24, 0x04	; 4
 114:	80 62       	ori	r24, 0x20	; 32
 116:	84 b9       	out	0x04, r24	; 4
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	80 63       	ori	r24, 0x30	; 48
 11c:	87 b9       	out	0x07, r24	; 7
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	85 b9       	out	0x05, r24	; 5
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	88 b9       	out	0x08, r24	; 8
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	88 b9       	out	0x08, r24	; 8
 130:	08 95       	ret

00000132 <configUART>:
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8a b9       	out	0x0a, r24	; 10
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 15a:	08 95       	ret

0000015c <writeChar>:
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <writeChar>
 164:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 168:	08 95       	ret

0000016a <writeString>:
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <writeString+0x16>
 17a:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	f8 01       	movw	r30, r16
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	80 81       	ld	r24, Z
 188:	81 11       	cpse	r24, r1
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <writeString+0x10>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <configChannel>:
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	61 f0       	breq	.+24     	; 0x1b2 <configChannel+0x1c>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <configChannel+0x10>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 f0       	breq	.+36     	; 0x1c4 <configChannel+0x2e>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	c9 f0       	breq	.+50     	; 0x1d6 <configChannel+0x40>
 1a4:	21 c0       	rjmp	.+66     	; 0x1e8 <configChannel+0x52>
 1a6:	ec e7       	ldi	r30, 0x7C	; 124
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret
 1b2:	ec e7       	ldi	r30, 0x7C	; 124
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	80 83       	st	Z, r24
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret
 1c4:	ec e7       	ldi	r30, 0x7C	; 124
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	80 83       	st	Z, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret
 1d6:	ec e7       	ldi	r30, 0x7C	; 124
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	80 83       	st	Z, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	83 60       	ori	r24, 0x03	; 3
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret
 1e8:	ec e7       	ldi	r30, 0x7C	; 124
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret

000001f4 <configADC>:
 1f4:	ec e7       	ldi	r30, 0x7C	; 124
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
 1fa:	80 81       	ld	r24, Z
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	8f 7d       	andi	r24, 0xDF	; 223
 204:	80 83       	st	Z, r24
 206:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <channel>
 20a:	0e 94 cb 00 	call	0x196	; 0x196 <configChannel>
 20e:	ea e7       	ldi	r30, 0x7A	; 122
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	10 82       	st	Z, r1
 214:	80 81       	ld	r24, Z
 216:	88 60       	ori	r24, 0x08	; 8
 218:	80 83       	st	Z, r24
 21a:	80 81       	ld	r24, Z
 21c:	87 60       	ori	r24, 0x07	; 7
 21e:	80 83       	st	Z, r24
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <initPWMFast0A>:
}
	
	// PWM 0
void initPWMFast0A(uint8_t invertido, uint16_t prescaler){
	// Define pin
	DDRD |= (1<<DDD6);
 22e:	9a b1       	in	r25, 0x0a	; 10
 230:	90 64       	ori	r25, 0x40	; 64
 232:	9a b9       	out	0x0a, r25	; 10
	// Mode options
	TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0));
 234:	94 b5       	in	r25, 0x24	; 36
 236:	9f 73       	andi	r25, 0x3F	; 63
 238:	94 bd       	out	0x24, r25	; 36
	if (invertido == invert)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	21 f4       	brne	.+8      	; 0x246 <initPWMFast0A+0x18>
	{
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0); // Inverted
 23e:	84 b5       	in	r24, 0x24	; 36
 240:	80 6c       	ori	r24, 0xC0	; 192
 242:	84 bd       	out	0x24, r24	; 36
 244:	03 c0       	rjmp	.+6      	; 0x24c <initPWMFast0A+0x1e>
	}
	else
	{
		TCCR0A |= (1 << COM0A1); // Non-inverted
 246:	84 b5       	in	r24, 0x24	; 36
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	84 bd       	out	0x24, r24	; 36
	}
	// Fast PWM mode
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 24c:	84 b5       	in	r24, 0x24	; 36
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	84 bd       	out	0x24, r24	; 36
	// PreScaler options
	TCCR0B = 0;
 252:	15 bc       	out	0x25, r1	; 37
	switch(prescaler){
 254:	60 34       	cpi	r22, 0x40	; 64
 256:	71 05       	cpc	r23, r1
 258:	c1 f0       	breq	.+48     	; 0x28a <initPWMFast0A+0x5c>
 25a:	38 f4       	brcc	.+14     	; 0x26a <initPWMFast0A+0x3c>
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	71 05       	cpc	r23, r1
 260:	61 f0       	breq	.+24     	; 0x27a <initPWMFast0A+0x4c>
 262:	68 30       	cpi	r22, 0x08	; 8
 264:	71 05       	cpc	r23, r1
 266:	69 f0       	breq	.+26     	; 0x282 <initPWMFast0A+0x54>
 268:	1f c0       	rjmp	.+62     	; 0x2a8 <initPWMFast0A+0x7a>
 26a:	61 15       	cp	r22, r1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	78 07       	cpc	r23, r24
 270:	81 f0       	breq	.+32     	; 0x292 <initPWMFast0A+0x64>
 272:	61 15       	cp	r22, r1
 274:	74 40       	sbci	r23, 0x04	; 4
 276:	89 f0       	breq	.+34     	; 0x29a <initPWMFast0A+0x6c>
 278:	17 c0       	rjmp	.+46     	; 0x2a8 <initPWMFast0A+0x7a>
		case 1:
		TCCR0B |= (1 << CS00);
 27a:	85 b5       	in	r24, 0x25	; 37
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	85 bd       	out	0x25, r24	; 37
		break;
 280:	08 95       	ret
		case 8:
		TCCR0B |= (1 << CS01);
 282:	85 b5       	in	r24, 0x25	; 37
 284:	82 60       	ori	r24, 0x02	; 2
 286:	85 bd       	out	0x25, r24	; 37
		break;
 288:	08 95       	ret
		case 64:
		TCCR0B |= (1 << CS01) | (1 << CS00);
 28a:	85 b5       	in	r24, 0x25	; 37
 28c:	83 60       	ori	r24, 0x03	; 3
 28e:	85 bd       	out	0x25, r24	; 37
		break;
 290:	08 95       	ret
		case 256:
		TCCR0B |= (1 << CS02) | (0 << CS01) | (0 << CS00);
 292:	85 b5       	in	r24, 0x25	; 37
 294:	84 60       	ori	r24, 0x04	; 4
 296:	85 bd       	out	0x25, r24	; 37
		break;
 298:	08 95       	ret
		case 1024:
		//TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00);
		TCCR0B |= (1 << CS02) | (1 << CS00);
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	85 60       	ori	r24, 0x05	; 5
 29e:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(1 << CS01);
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	85 bd       	out	0x25, r24	; 37
		break;
 2a6:	08 95       	ret
		default:
		TCCR0B |= (1 << CS00);
 2a8:	85 b5       	in	r24, 0x25	; 37
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	85 bd       	out	0x25, r24	; 37
 2ae:	08 95       	ret

000002b0 <updateDutyCycle0A>:
	}
	
}

void updateDutyCycle0A(uint16_t dutycycle){
	OCR0A = dutycycle;
 2b0:	87 bd       	out	0x27, r24	; 39
 2b2:	08 95       	ret

000002b4 <initPWMFast0B>:
}

void initPWMFast0B(uint8_t invertido, uint16_t prescaler){
	// Define pin
	DDRD |= (1<<DDD5);
 2b4:	9a b1       	in	r25, 0x0a	; 10
 2b6:	90 62       	ori	r25, 0x20	; 32
 2b8:	9a b9       	out	0x0a, r25	; 10
	// Mode options
	TCCR0A &= ~((1 << COM0B1) | (1 << COM0B0));
 2ba:	94 b5       	in	r25, 0x24	; 36
 2bc:	9f 7c       	andi	r25, 0xCF	; 207
 2be:	94 bd       	out	0x24, r25	; 36
	if (invertido == invert)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <initPWMFast0B+0x18>
	{
		TCCR0A |= (1 << COM0B1) | (1 << COM0B0); // Inverted
 2c4:	84 b5       	in	r24, 0x24	; 36
 2c6:	80 63       	ori	r24, 0x30	; 48
 2c8:	84 bd       	out	0x24, r24	; 36
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <initPWMFast0B+0x1e>
	}
	else
	{
		TCCR0A |= (1 << COM0B1); // Non-inverted
 2cc:	84 b5       	in	r24, 0x24	; 36
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	84 bd       	out	0x24, r24	; 36
	}
	// Fast PWM mode
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	83 60       	ori	r24, 0x03	; 3
 2d6:	84 bd       	out	0x24, r24	; 36
	// PreScaler options
	TCCR0B = 0;
 2d8:	15 bc       	out	0x25, r1	; 37
	switch(prescaler){
 2da:	60 34       	cpi	r22, 0x40	; 64
 2dc:	71 05       	cpc	r23, r1
 2de:	c1 f0       	breq	.+48     	; 0x310 <initPWMFast0B+0x5c>
 2e0:	38 f4       	brcc	.+14     	; 0x2f0 <initPWMFast0B+0x3c>
 2e2:	61 30       	cpi	r22, 0x01	; 1
 2e4:	71 05       	cpc	r23, r1
 2e6:	61 f0       	breq	.+24     	; 0x300 <initPWMFast0B+0x4c>
 2e8:	68 30       	cpi	r22, 0x08	; 8
 2ea:	71 05       	cpc	r23, r1
 2ec:	69 f0       	breq	.+26     	; 0x308 <initPWMFast0B+0x54>
 2ee:	1c c0       	rjmp	.+56     	; 0x328 <initPWMFast0B+0x74>
 2f0:	61 15       	cp	r22, r1
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	78 07       	cpc	r23, r24
 2f6:	81 f0       	breq	.+32     	; 0x318 <initPWMFast0B+0x64>
 2f8:	61 15       	cp	r22, r1
 2fa:	74 40       	sbci	r23, 0x04	; 4
 2fc:	89 f0       	breq	.+34     	; 0x320 <initPWMFast0B+0x6c>
 2fe:	14 c0       	rjmp	.+40     	; 0x328 <initPWMFast0B+0x74>
		case 1:
		TCCR0B |= (1 << CS00);
 300:	85 b5       	in	r24, 0x25	; 37
 302:	81 60       	ori	r24, 0x01	; 1
 304:	85 bd       	out	0x25, r24	; 37
		break;
 306:	08 95       	ret
		case 8:
		TCCR0B |= (1 << CS01);
 308:	85 b5       	in	r24, 0x25	; 37
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	85 bd       	out	0x25, r24	; 37
		break;
 30e:	08 95       	ret
		case 64:
		TCCR0B |= (1 << CS01) | (1 << CS00);
 310:	85 b5       	in	r24, 0x25	; 37
 312:	83 60       	ori	r24, 0x03	; 3
 314:	85 bd       	out	0x25, r24	; 37
		break;
 316:	08 95       	ret
		case 256:
		TCCR0B |= (1 << CS02) | (0 << CS01) | (0 << CS00);
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	85 bd       	out	0x25, r24	; 37
		break;
 31e:	08 95       	ret
		case 1024:
		TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00);
 320:	85 b5       	in	r24, 0x25	; 37
 322:	85 60       	ori	r24, 0x05	; 5
 324:	85 bd       	out	0x25, r24	; 37
		break;
 326:	08 95       	ret
		default:
		TCCR0B |= (1 << CS00);
 328:	85 b5       	in	r24, 0x25	; 37
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	85 bd       	out	0x25, r24	; 37
 32e:	08 95       	ret

00000330 <updateDutyCycle0B>:
	}
	
}

void updateDutyCycle0B(uint16_t dutycycle){
	OCR0B = dutycycle;
 330:	88 bd       	out	0x28, r24	; 40
 332:	08 95       	ret

00000334 <initPWMFast2A>:
}
	
	// PWM 2
void initPWMFast2A(uint8_t invertido, uint16_t prescaler){
	// Define pin
	DDRB |= (1<<DDB3);
 334:	94 b1       	in	r25, 0x04	; 4
 336:	98 60       	ori	r25, 0x08	; 8
 338:	94 b9       	out	0x04, r25	; 4
	// Mode options
	TCCR2A &= ~((1 << COM2A1) | (1 << COM2A0));
 33a:	e0 eb       	ldi	r30, 0xB0	; 176
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	90 81       	ld	r25, Z
 340:	9f 73       	andi	r25, 0x3F	; 63
 342:	90 83       	st	Z, r25
	if (invertido == invert)
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	21 f4       	brne	.+8      	; 0x350 <initPWMFast2A+0x1c>
	{
		TCCR2A |= (1 << COM2A1) | (1 << COM2A0); // Inverted
 348:	80 81       	ld	r24, Z
 34a:	80 6c       	ori	r24, 0xC0	; 192
 34c:	80 83       	st	Z, r24
 34e:	05 c0       	rjmp	.+10     	; 0x35a <initPWMFast2A+0x26>
	}
	else
	{
		TCCR2A |= (1 << COM2A1); // Non-inverted
 350:	e0 eb       	ldi	r30, 0xB0	; 176
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24
	}
	// Fast PWM mode
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 35a:	e0 eb       	ldi	r30, 0xB0	; 176
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	83 60       	ori	r24, 0x03	; 3
 362:	80 83       	st	Z, r24
	// PreScaler options
	TCCR2B = 0;
 364:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	switch(prescaler){
 368:	60 34       	cpi	r22, 0x40	; 64
 36a:	71 05       	cpc	r23, r1
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <initPWMFast2A+0x72>
 36e:	38 f4       	brcc	.+14     	; 0x37e <initPWMFast2A+0x4a>
 370:	61 30       	cpi	r22, 0x01	; 1
 372:	71 05       	cpc	r23, r1
 374:	61 f0       	breq	.+24     	; 0x38e <initPWMFast2A+0x5a>
 376:	68 30       	cpi	r22, 0x08	; 8
 378:	71 05       	cpc	r23, r1
 37a:	79 f0       	breq	.+30     	; 0x39a <initPWMFast2A+0x66>
 37c:	26 c0       	rjmp	.+76     	; 0x3ca <initPWMFast2A+0x96>
 37e:	61 15       	cp	r22, r1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	78 07       	cpc	r23, r24
 384:	b1 f0       	breq	.+44     	; 0x3b2 <initPWMFast2A+0x7e>
 386:	61 15       	cp	r22, r1
 388:	74 40       	sbci	r23, 0x04	; 4
 38a:	c9 f0       	breq	.+50     	; 0x3be <initPWMFast2A+0x8a>
 38c:	1e c0       	rjmp	.+60     	; 0x3ca <initPWMFast2A+0x96>
		case 1:
		TCCR2B |= (1 << CS20);
 38e:	e1 eb       	ldi	r30, 0xB1	; 177
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	81 60       	ori	r24, 0x01	; 1
 396:	80 83       	st	Z, r24
		break;
 398:	08 95       	ret
		case 8:
		TCCR2B |= (1 << CS21);
 39a:	e1 eb       	ldi	r30, 0xB1	; 177
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	80 83       	st	Z, r24
		break;
 3a4:	08 95       	ret
		case 64:
		TCCR2B |= (1 << CS21) | (1 << CS20);
 3a6:	e1 eb       	ldi	r30, 0xB1	; 177
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	83 60       	ori	r24, 0x03	; 3
 3ae:	80 83       	st	Z, r24
		break;
 3b0:	08 95       	ret
		case 256:
		TCCR2B |= (1 << CS22) | (0 << CS21) | (0 << CS20);
 3b2:	e1 eb       	ldi	r30, 0xB1	; 177
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	80 83       	st	Z, r24
		break;
 3bc:	08 95       	ret
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
 3be:	e1 eb       	ldi	r30, 0xB1	; 177
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	87 60       	ori	r24, 0x07	; 7
 3c6:	80 83       	st	Z, r24
		break;
 3c8:	08 95       	ret
		default:
		TCCR2B |= (1 << CS20);
 3ca:	e1 eb       	ldi	r30, 0xB1	; 177
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	80 83       	st	Z, r24
 3d4:	08 95       	ret

000003d6 <updateDutyCycle2A>:
	}
	
}

void updateDutyCycle2A(uint16_t dutycycle){
	OCR2A = dutycycle;
 3d6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3da:	08 95       	ret

000003dc <initPWMFast2B>:
}

void initPWMFast2B(uint8_t invertido, uint16_t prescaler){
	// Define pin
	DDRD |= (1<<DDD3);
 3dc:	9a b1       	in	r25, 0x0a	; 10
 3de:	98 60       	ori	r25, 0x08	; 8
 3e0:	9a b9       	out	0x0a, r25	; 10
	// Mode options
	TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
 3e2:	e0 eb       	ldi	r30, 0xB0	; 176
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	90 81       	ld	r25, Z
 3e8:	9f 7c       	andi	r25, 0xCF	; 207
 3ea:	90 83       	st	Z, r25
	if (invertido == invert)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <initPWMFast2B+0x1c>
	{
		TCCR2A |= (1 << COM2B1) | (1 << COM2B0); // Inverted
 3f0:	80 81       	ld	r24, Z
 3f2:	80 63       	ori	r24, 0x30	; 48
 3f4:	80 83       	st	Z, r24
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	}
	else
	{
		TCCR2A |= (1 << COM2B1); // Non-inverted
 3f8:	e0 eb       	ldi	r30, 0xB0	; 176
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	80 83       	st	Z, r24
	}
	// Fast PWM mode
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 402:	e0 eb       	ldi	r30, 0xB0	; 176
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	83 60       	ori	r24, 0x03	; 3
 40a:	80 83       	st	Z, r24
	// PreScaler options
	TCCR2B = 0;
 40c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	switch(prescaler){
 410:	60 34       	cpi	r22, 0x40	; 64
 412:	71 05       	cpc	r23, r1
 414:	e1 f0       	breq	.+56     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 416:	38 f4       	brcc	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	61 30       	cpi	r22, 0x01	; 1
 41a:	71 05       	cpc	r23, r1
 41c:	61 f0       	breq	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	68 30       	cpi	r22, 0x08	; 8
 420:	71 05       	cpc	r23, r1
 422:	79 f0       	breq	.+30     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 424:	26 c0       	rjmp	.+76     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 426:	61 15       	cp	r22, r1
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	78 07       	cpc	r23, r24
 42c:	b1 f0       	breq	.+44     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 42e:	61 15       	cp	r22, r1
 430:	74 40       	sbci	r23, 0x04	; 4
 432:	c9 f0       	breq	.+50     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 434:	1e c0       	rjmp	.+60     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		case 1:
		TCCR2B |= (1 << CS20);
 436:	e1 eb       	ldi	r30, 0xB1	; 177
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 83       	st	Z, r24
		break;
 440:	08 95       	ret
		case 8:
		TCCR2B |= (1 << CS21);
 442:	e1 eb       	ldi	r30, 0xB1	; 177
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 83       	st	Z, r24
		break;
 44c:	08 95       	ret
		case 64:
		TCCR2B |= (1 << CS21) | (1 << CS20);
 44e:	e1 eb       	ldi	r30, 0xB1	; 177
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	83 60       	ori	r24, 0x03	; 3
 456:	80 83       	st	Z, r24
		break;
 458:	08 95       	ret
		case 256:
		TCCR2B |= (1 << CS22) | (0 << CS21) | (0 << CS20);
 45a:	e1 eb       	ldi	r30, 0xB1	; 177
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	84 60       	ori	r24, 0x04	; 4
 462:	80 83       	st	Z, r24
		break;
 464:	08 95       	ret
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
 466:	e1 eb       	ldi	r30, 0xB1	; 177
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	87 60       	ori	r24, 0x07	; 7
 46e:	80 83       	st	Z, r24
		break;
 470:	08 95       	ret
		default:
		TCCR2B |= (1 << CS20);
 472:	e1 eb       	ldi	r30, 0xB1	; 177
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret

0000047e <setup>:
/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup()
{
	// Disable global interruptions
	cli();
 47e:	f8 94       	cli
	// Enable PreScaler change
	// Set PreScaler = 1 --> F_CPU = 16MHz
	CLKPR = (1 << CLKPCE);
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
	// Configure change of mode
	configMODE();
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <configMODE>
	// Start the UART communication
	configUART();
 48a:	0e 94 99 00 	call	0x132	; 0x132 <configUART>
	// Start ADC configuration
	configADC();
 48e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <configADC>
	// Setup the PWM2 channels
	initPWMFast2A(non_invert, 1024);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	74 e0       	ldi	r23, 0x04	; 4
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 9a 01 	call	0x334	; 0x334 <initPWMFast2A>
	initPWMFast2B(non_invert, 1024);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	74 e0       	ldi	r23, 0x04	; 4
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <initPWMFast2B>
	// Setup the PWM0 channels
	initPWMFast0A(non_invert, 1024);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	74 e0       	ldi	r23, 0x04	; 4
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 17 01 	call	0x22e	; 0x22e <initPWMFast0A>
	initPWMFast0B(non_invert, 1024);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	74 e0       	ldi	r23, 0x04	; 4
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initPWMFast0B>
	// Enable global interruptions
	sei();
 4ba:	78 94       	sei
 4bc:	08 95       	ret

000004be <updateDutyCycle2B>:
	}
	
}

void updateDutyCycle2B(uint16_t dutycycle){
	OCR2B = dutycycle;
 4be:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 4c2:	08 95       	ret

000004c4 <writeEEPROM>:

 // EEPROM
 void writeEEPROM(uint8_t dato, uint16_t direccion)
 {
	 // Disable global interruption
	 cli();
 4c4:	f8 94       	cli
	 // Erase and write mode
	 while(EECR & (1 << EEPE)); // Wait until bit EEPE becomes zero
 4c6:	f9 99       	sbic	0x1f, 1	; 31
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <writeEEPROM+0x2>
	 // Establish direction
	 EEAR = direccion;
 4ca:	72 bd       	out	0x22, r23	; 34
 4cc:	61 bd       	out	0x21, r22	; 33
	 // Establish payload
	 EEDR = dato;
 4ce:	80 bd       	out	0x20, r24	; 32
	 // Master write enable
	 EECR |= (1 << EEMPE);
 4d0:	8f b3       	in	r24, 0x1f	; 31
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	8f bb       	out	0x1f, r24	; 31
	 // Write enable
	 EECR |= (1 << EEPE);
 4d6:	8f b3       	in	r24, 0x1f	; 31
 4d8:	82 60       	ori	r24, 0x02	; 2
 4da:	8f bb       	out	0x1f, r24	; 31
	 // Enable global interruption
	 sei();
 4dc:	78 94       	sei
 4de:	08 95       	ret

000004e0 <readEEPROM>:
 }

 uint8_t readEEPROM(uint16_t direccion)
 {
	 // Erase and write mode
	 while(EECR & (1 << EEPE)); // Wait until bit EEPE becomes zero
 4e0:	f9 99       	sbic	0x1f, 1	; 31
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <readEEPROM>
	 // Establish direction
	 EEAR = direccion;
 4e4:	92 bd       	out	0x22, r25	; 34
 4e6:	81 bd       	out	0x21, r24	; 33
	 // Read the payload
	 EECR |= (1 << EERE);
 4e8:	8f b3       	in	r24, 0x1f	; 31
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	8f bb       	out	0x1f, r24	; 31
	 // Return the data
	 return EEDR;
 4ee:	80 b5       	in	r24, 0x20	; 32
 }
 4f0:	08 95       	ret

000004f2 <program>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	82 e5       	ldi	r24, 0x52	; 82
 4f6:	97 e0       	ldi	r25, 0x07	; 7
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <program+0x6>
 500:	00 c0       	rjmp	.+0      	; 0x502 <program+0x10>
 502:	00 00       	nop
void program()
{
	// De bounce
	_delay_ms(150);
	// Save new state
	buttonstate1 = PINB;
 504:	83 b1       	in	r24, 0x03	; 3
 506:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <buttonstate1>
	buttonstate3 = PIND;
 50a:	99 b1       	in	r25, 0x09	; 9
 50c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <buttonstate3>
	// Change of state with pushbutton
	if (buttonstate0 == buttonstate1)
 510:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <buttonstate0>
 514:	89 13       	cpse	r24, r25
 516:	e9 c0       	rjmp	.+466    	; 0x6ea <program+0x1f8>
	{
		if (!(PINB & (1 << PINB0))) // mask: 0bXXXX XXXX & 0b0000 0001 = 0b0000 000X
 518:	18 99       	sbic	0x03, 0	; 3
 51a:	18 c0       	rjmp	.+48     	; 0x54c <program+0x5a>
		{
			// Change the current state
			state++;
 51c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <state>
			// Reset the state when count is finished
			if(state >= 4) state = 1;
 526:	84 30       	cpi	r24, 0x04	; 4
 528:	18 f0       	brcs	.+6      	; 0x530 <program+0x3e>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <state>
			
			// Restore ADC
			if(state == 1)
 530:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	09 f0       	breq	.+2      	; 0x53a <program+0x48>
 538:	d4 c0       	rjmp	.+424    	; 0x6e2 <program+0x1f0>
			{
				ADCSRA |= (1 << ADEN);
 53a:	ea e7       	ldi	r30, 0x7A	; 122
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	80 68       	ori	r24, 0x80	; 128
 542:	80 83       	st	Z, r24
				ADCSRA |= (1 << ADSC);
 544:	80 81       	ld	r24, Z
 546:	80 64       	ori	r24, 0x40	; 64
 548:	80 83       	st	Z, r24
 54a:	cb c0       	rjmp	.+406    	; 0x6e2 <program+0x1f0>
			}
			
		}
		else if ( (!(PINB & (1 << PINB1))) && state == 3)
 54c:	19 99       	sbic	0x03, 1	; 3
 54e:	10 c0       	rjmp	.+32     	; 0x570 <program+0x7e>
 550:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 554:	83 30       	cpi	r24, 0x03	; 3
 556:	61 f4       	brne	.+24     	; 0x570 <program+0x7e>
		{
			// Increment by one
			stateEEPROM++;
 558:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <stateEEPROM>
			// If state 4 is surpassed, return to 1
			if(stateEEPROM >= 5) stateEEPROM = 1;
 562:	85 30       	cpi	r24, 0x05	; 5
 564:	08 f4       	brcc	.+2      	; 0x568 <program+0x76>
 566:	bd c0       	rjmp	.+378    	; 0x6e2 <program+0x1f0>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <stateEEPROM>
 56e:	b9 c0       	rjmp	.+370    	; 0x6e2 <program+0x1f0>
		}
		else if ( (!(PINB & (1 << PINB2))) && state == 3)
 570:	1a 99       	sbic	0x03, 2	; 3
 572:	b7 c0       	rjmp	.+366    	; 0x6e2 <program+0x1f0>
 574:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	09 f0       	breq	.+2      	; 0x57e <program+0x8c>
 57c:	b2 c0       	rjmp	.+356    	; 0x6e2 <program+0x1f0>
		{	
			// Store in EEPROM first position
			writeEEPROM(servo1, (eeprom_address + 0) + 4*(stateEEPROM - 1) );
 57e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 582:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <stateEEPROM>
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	61 50       	subi	r22, 0x01	; 1
 58a:	71 09       	sbc	r23, r1
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	68 0f       	add	r22, r24
 596:	71 1d       	adc	r23, r1
 598:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <servo1>
 59c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeEEPROM>
			// Write position in monitor
			writeString("1. Stored: ");
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 b5 00 	call	0x16a	; 0x16a <writeString>
			writeChar(readEEPROM( (eeprom_address + 0) + 4*(stateEEPROM - 1) ));
 5a8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 5ac:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	82 0f       	add	r24, r18
 5be:	91 1d       	adc	r25, r1
 5c0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 5c4:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			writeChar('\n');
 5c8:	8a e0       	ldi	r24, 0x0A	; 10
 5ca:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			
			// Store in EEPROM second position
			writeEEPROM(servo2, (eeprom_address + 1) + 4*(stateEEPROM - 1) );
 5ce:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	68 0f       	add	r22, r24
 5ea:	79 1f       	adc	r23, r25
 5ec:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <servo2>
 5f0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeEEPROM>
			// Write position in monitor
			writeString("2. Stored: ");
 5f4:	8c e0       	ldi	r24, 0x0C	; 12
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 b5 00 	call	0x16a	; 0x16a <writeString>
			writeChar(readEEPROM((eeprom_address + 1) + 4*(stateEEPROM - 1) ));
 5fc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	2f 5f       	subi	r18, 0xFF	; 255
 604:	3f 4f       	sbci	r19, 0xFF	; 255
 606:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stateEEPROM>
 60a:	89 2f       	mov	r24, r25
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	82 0f       	add	r24, r18
 61a:	93 1f       	adc	r25, r19
 61c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 620:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			writeChar('\n');
 624:	8a e0       	ldi	r24, 0x0A	; 10
 626:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			
			// Store in EEPROM third position
			writeEEPROM(servo3, (eeprom_address + 2) + 4*(stateEEPROM - 1) );
 62a:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	6e 5f       	subi	r22, 0xFE	; 254
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	68 0f       	add	r22, r24
 646:	79 1f       	adc	r23, r25
 648:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <servo3>
 64c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeEEPROM>
			// Write position in monitor
			writeString("3. Stored: ");
 650:	88 e1       	ldi	r24, 0x18	; 24
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 b5 00 	call	0x16a	; 0x16a <writeString>
			writeChar(readEEPROM((eeprom_address + 2) + 4*(stateEEPROM - 1) ));
 658:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	2e 5f       	subi	r18, 0xFE	; 254
 660:	3f 4f       	sbci	r19, 0xFF	; 255
 662:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stateEEPROM>
 666:	89 2f       	mov	r24, r25
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	82 0f       	add	r24, r18
 676:	93 1f       	adc	r25, r19
 678:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 67c:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			writeChar('\n');
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			
			// Store in EEPROM third position
			writeEEPROM(servo4, (eeprom_address + 3) + 4*(stateEEPROM - 1) );
 686:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	6d 5f       	subi	r22, 0xFD	; 253
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	68 0f       	add	r22, r24
 6a2:	79 1f       	adc	r23, r25
 6a4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <servo4>
 6a8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeEEPROM>
			// Write position in monitor
			writeString("4. Stored: ");
 6ac:	84 e2       	ldi	r24, 0x24	; 36
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	0e 94 b5 00 	call	0x16a	; 0x16a <writeString>
			writeChar(readEEPROM((eeprom_address + 3) + 4*(stateEEPROM - 1) ));
 6b4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	2d 5f       	subi	r18, 0xFD	; 253
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <stateEEPROM>
 6c2:	89 2f       	mov	r24, r25
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 6d8:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			writeChar('\n');
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	0e 94 ae 00 	call	0x15c	; 0x15c <writeChar>
			
		}
		pcintFlag = 0;
 6e2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <pcintFlag>
		buttonstate1 = 0;
 6e6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <buttonstate1>
	}
	
	// Pin change D
	if ((buttonstate2 == buttonstate3) && state == 3)
 6ea:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <buttonstate2>
 6ee:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <buttonstate3>
 6f2:	98 13       	cpse	r25, r24
 6f4:	af c0       	rjmp	.+350    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 6f6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 6fa:	83 30       	cpi	r24, 0x03	; 3
 6fc:	09 f0       	breq	.+2      	; 0x700 <program+0x20e>
 6fe:	aa c0       	rjmp	.+340    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	{
		if ( !(PIND & (1 << PIND7)) ) // mask: 0bXXXX XXXX & 0b0000 0001 = 0b0000 000X
 700:	4f 99       	sbic	0x09, 7	; 9
 702:	a6 c0       	rjmp	.+332    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		{
			// ADC disable
			ADCSRA &= ~(1 << ADEN);
 704:	ea e7       	ldi	r30, 0x7A	; 122
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	8f 77       	andi	r24, 0x7F	; 127
 70c:	80 83       	st	Z, r24
			// Replicate position
			switch(stateEEPROM)
 70e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 712:	82 30       	cpi	r24, 0x02	; 2
 714:	79 f1       	breq	.+94     	; 0x774 <program+0x282>
 716:	18 f4       	brcc	.+6      	; 0x71e <program+0x22c>
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	41 f0       	breq	.+16     	; 0x72c <program+0x23a>
 71c:	99 c0       	rjmp	.+306    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	09 f4       	brne	.+2      	; 0x724 <program+0x232>
 722:	4d c0       	rjmp	.+154    	; 0x7be <program+0x2cc>
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	09 f4       	brne	.+2      	; 0x72a <program+0x238>
 728:	6f c0       	rjmp	.+222    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 72a:	92 c0       	rjmp	.+292    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			{
				case 1:
				updateDutyCycle2A(readEEPROM(eeprom_address + 0));
 72c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <updateDutyCycle2A>
				updateDutyCycle2B(readEEPROM(eeprom_address + 1));
 73c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 5f 02 	call	0x4be	; 0x4be <updateDutyCycle2B>
				updateDutyCycle0A(readEEPROM(eeprom_address + 2));
 74e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 96       	adiw	r24, 0x02	; 2
 756:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateDutyCycle0A>
				updateDutyCycle0B(readEEPROM(eeprom_address + 3));
 760:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	03 96       	adiw	r24, 0x03	; 3
 768:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 98 01 	call	0x330	; 0x330 <updateDutyCycle0B>
				break;
 772:	6e c0       	rjmp	.+220    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				
				case 2:
				updateDutyCycle2A(readEEPROM(eeprom_address + 4));
 774:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	04 96       	adiw	r24, 0x04	; 4
 77c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <updateDutyCycle2A>
				updateDutyCycle2B(readEEPROM(eeprom_address + 5));
 786:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	05 96       	adiw	r24, 0x05	; 5
 78e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 5f 02 	call	0x4be	; 0x4be <updateDutyCycle2B>
				updateDutyCycle0A(readEEPROM(eeprom_address + 6));
 798:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	06 96       	adiw	r24, 0x06	; 6
 7a0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateDutyCycle0A>
				updateDutyCycle0B(readEEPROM(eeprom_address + 7));
 7aa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	07 96       	adiw	r24, 0x07	; 7
 7b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 98 01 	call	0x330	; 0x330 <updateDutyCycle0B>
				break;
 7bc:	49 c0       	rjmp	.+146    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				
				case 3:
				updateDutyCycle2A(readEEPROM(eeprom_address + 8));
 7be:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	08 96       	adiw	r24, 0x08	; 8
 7c6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <updateDutyCycle2A>
				updateDutyCycle2B(readEEPROM(eeprom_address + 9));
 7d0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	09 96       	adiw	r24, 0x09	; 9
 7d8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 5f 02 	call	0x4be	; 0x4be <updateDutyCycle2B>
				updateDutyCycle0A(readEEPROM(eeprom_address + 10));
 7e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0a 96       	adiw	r24, 0x0a	; 10
 7ea:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateDutyCycle0A>
				updateDutyCycle0B(readEEPROM(eeprom_address + 11));
 7f4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0b 96       	adiw	r24, 0x0b	; 11
 7fc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 98 01 	call	0x330	; 0x330 <updateDutyCycle0B>
				break;
 806:	24 c0       	rjmp	.+72     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				
				case 4:
				updateDutyCycle2A(readEEPROM(eeprom_address + 12));
 808:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0c 96       	adiw	r24, 0x0c	; 12
 810:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <updateDutyCycle2A>
				updateDutyCycle2B(readEEPROM(eeprom_address + 13));
 81a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0d 96       	adiw	r24, 0x0d	; 13
 822:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 5f 02 	call	0x4be	; 0x4be <updateDutyCycle2B>
				updateDutyCycle0A(readEEPROM(eeprom_address + 14));
 82c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 96       	adiw	r24, 0x0e	; 14
 834:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateDutyCycle0A>
				updateDutyCycle0B(readEEPROM(eeprom_address + 15));
 83e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0f 96       	adiw	r24, 0x0f	; 15
 846:	0e 94 70 02 	call	0x4e0	; 0x4e0 <readEEPROM>
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 98 01 	call	0x330	; 0x330 <updateDutyCycle0B>
				break;
			}
		}
		buttonstate3 = 0;
 850:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <buttonstate3>
	}
	
	// Main program
	switch(state)
 854:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 858:	82 30       	cpi	r24, 0x02	; 2
 85a:	c1 f0       	breq	.+48     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 85c:	83 30       	cpi	r24, 0x03	; 3
 85e:	49 f1       	breq	.+82     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	09 f0       	breq	.+2      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 864:	63 c0       	rjmp	.+198    	; 0x92c <__stack+0x2d>
	{
		case 1: // Manual
			// Led sequence
			PORTD |= (1 << PORTD2);
 866:	8b b1       	in	r24, 0x0b	; 11
 868:	84 60       	ori	r24, 0x04	; 4
 86a:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PORTB4);
 86c:	85 b1       	in	r24, 0x05	; 5
 86e:	8f 7e       	andi	r24, 0xEF	; 239
 870:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1 << PORTD4);
 872:	8b b1       	in	r24, 0x0b	; 11
 874:	8f 7e       	andi	r24, 0xEF	; 239
 876:	8b b9       	out	0x0b, r24	; 11
			// Shutdown EEPROM states
			PORTB &= ~(1 << PORTB5);
 878:	85 b1       	in	r24, 0x05	; 5
 87a:	8f 7d       	andi	r24, 0xDF	; 223
 87c:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~(1 << PORTC4);
 87e:	88 b1       	in	r24, 0x08	; 8
 880:	8f 7e       	andi	r24, 0xEF	; 239
 882:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PORTC5);
 884:	88 b1       	in	r24, 0x08	; 8
 886:	8f 7d       	andi	r24, 0xDF	; 223
 888:	88 b9       	out	0x08, r24	; 8
			break;
 88a:	08 95       	ret
			
		case 2: // Serial
			// Led sequence
			PORTD |= (1 << PORTD4);
 88c:	8b b1       	in	r24, 0x0b	; 11
 88e:	80 61       	ori	r24, 0x10	; 16
 890:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PORTB4);
 892:	85 b1       	in	r24, 0x05	; 5
 894:	8f 7e       	andi	r24, 0xEF	; 239
 896:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1 << PORTD2);
 898:	8b b1       	in	r24, 0x0b	; 11
 89a:	8b 7f       	andi	r24, 0xFB	; 251
 89c:	8b b9       	out	0x0b, r24	; 11
			// Shutdown EEPROM states
			PORTB &= ~(1 << PORTB5);
 89e:	85 b1       	in	r24, 0x05	; 5
 8a0:	8f 7d       	andi	r24, 0xDF	; 223
 8a2:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~(1 << PORTC4);
 8a4:	88 b1       	in	r24, 0x08	; 8
 8a6:	8f 7e       	andi	r24, 0xEF	; 239
 8a8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PORTC5);
 8aa:	88 b1       	in	r24, 0x08	; 8
 8ac:	8f 7d       	andi	r24, 0xDF	; 223
 8ae:	88 b9       	out	0x08, r24	; 8
			break;
 8b0:	08 95       	ret
			
		case 3: // EEPROM
			// Led sequence
			PORTB |= (1 << PORTB4);
 8b2:	85 b1       	in	r24, 0x05	; 5
 8b4:	80 61       	ori	r24, 0x10	; 16
 8b6:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1 << PORTD2);
 8b8:	8b b1       	in	r24, 0x0b	; 11
 8ba:	8b 7f       	andi	r24, 0xFB	; 251
 8bc:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << PORTD4);
 8be:	8b b1       	in	r24, 0x0b	; 11
 8c0:	8f 7e       	andi	r24, 0xEF	; 239
 8c2:	8b b9       	out	0x0b, r24	; 11
			// Introduce EEPROM case states
			switch(stateEEPROM)
 8c4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <stateEEPROM>
 8c8:	82 30       	cpi	r24, 0x02	; 2
 8ca:	99 f0       	breq	.+38     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8cc:	18 f4       	brcc	.+6      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8ce:	81 30       	cpi	r24, 0x01	; 1
 8d0:	31 f0       	breq	.+12     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d2:	08 95       	ret
 8d4:	83 30       	cpi	r24, 0x03	; 3
 8d6:	b9 f0       	breq	.+46     	; 0x906 <__stack+0x7>
 8d8:	84 30       	cpi	r24, 0x04	; 4
 8da:	f9 f0       	breq	.+62     	; 0x91a <__stack+0x1b>
 8dc:	08 95       	ret
			{
				case 1:
				PORTB |= (1 << PORTB5);
 8de:	85 b1       	in	r24, 0x05	; 5
 8e0:	80 62       	ori	r24, 0x20	; 32
 8e2:	85 b9       	out	0x05, r24	; 5
				PORTC &= ~(1 << PORTC4);
 8e4:	88 b1       	in	r24, 0x08	; 8
 8e6:	8f 7e       	andi	r24, 0xEF	; 239
 8e8:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PORTC5);
 8ea:	88 b1       	in	r24, 0x08	; 8
 8ec:	8f 7d       	andi	r24, 0xDF	; 223
 8ee:	88 b9       	out	0x08, r24	; 8
				break;
 8f0:	08 95       	ret
				
				case 2:
				PORTB &= ~(1 << PORTB5);
 8f2:	85 b1       	in	r24, 0x05	; 5
 8f4:	8f 7d       	andi	r24, 0xDF	; 223
 8f6:	85 b9       	out	0x05, r24	; 5
				PORTC |= (1 << PORTC4);
 8f8:	88 b1       	in	r24, 0x08	; 8
 8fa:	80 61       	ori	r24, 0x10	; 16
 8fc:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PORTC5);
 8fe:	88 b1       	in	r24, 0x08	; 8
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	88 b9       	out	0x08, r24	; 8
				break;
 904:	08 95       	ret
				
				case 3:
				PORTB |= (1 << PORTB5);
 906:	85 b1       	in	r24, 0x05	; 5
 908:	80 62       	ori	r24, 0x20	; 32
 90a:	85 b9       	out	0x05, r24	; 5
				PORTC |= (1 << PORTC4);
 90c:	88 b1       	in	r24, 0x08	; 8
 90e:	80 61       	ori	r24, 0x10	; 16
 910:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PORTC5);
 912:	88 b1       	in	r24, 0x08	; 8
 914:	8f 7d       	andi	r24, 0xDF	; 223
 916:	88 b9       	out	0x08, r24	; 8
				break;
 918:	08 95       	ret
				
				case 4:
				PORTB &= ~(1 << PORTB5);
 91a:	85 b1       	in	r24, 0x05	; 5
 91c:	8f 7d       	andi	r24, 0xDF	; 223
 91e:	85 b9       	out	0x05, r24	; 5
				PORTC &= ~(1 << PORTC4);
 920:	88 b1       	in	r24, 0x08	; 8
 922:	8f 7e       	andi	r24, 0xEF	; 239
 924:	88 b9       	out	0x08, r24	; 8
				PORTC |= (1 << PORTC5);
 926:	88 b1       	in	r24, 0x08	; 8
 928:	80 62       	ori	r24, 0x20	; 32
 92a:	88 b9       	out	0x08, r24	; 8
 92c:	08 95       	ret

0000092e <main>:
/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	// Go to uC configuration
	setup();
 92e:	0e 94 3f 02 	call	0x47e	; 0x47e <setup>
	// Print welcome message
	//writeString("Welcome User\n");
	while (1)
	{
		program();
 932:	0e 94 79 02 	call	0x4f2	; 0x4f2 <program>
 936:	fd cf       	rjmp	.-6      	; 0x932 <main+0x4>

00000938 <__vector_21>:


/********************************************************************/
/*----------------------Interrupt Subroutines-----------------------*/
ISR(ADC_vect)
{
 938:	1f 92       	push	r1
 93a:	0f 92       	push	r0
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	0f 92       	push	r0
 940:	11 24       	eor	r1, r1
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	2f 93       	push	r18
 94c:	3f 93       	push	r19
 94e:	4f 93       	push	r20
 950:	5f 93       	push	r21
 952:	6f 93       	push	r22
 954:	7f 93       	push	r23
 956:	8f 93       	push	r24
 958:	9f 93       	push	r25
 95a:	af 93       	push	r26
 95c:	bf 93       	push	r27
 95e:	ef 93       	push	r30
 960:	ff 93       	push	r31
	// Multiplexing of channels sequence
	if (channel == 0)
 962:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <channel>
 966:	81 11       	cpse	r24, r1
 968:	2f c0       	rjmp	.+94     	; 0x9c8 <__vector_21+0x90>
	{
		// Servo 1
		adcval0 = ADC;
 96a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 96e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 972:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <adcval0+0x1>
 976:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <adcval0>
		if (state == 1 || state == 3)
 97a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 97e:	81 30       	cpi	r24, 0x01	; 1
 980:	11 f0       	breq	.+4      	; 0x986 <__vector_21+0x4e>
 982:	83 30       	cpi	r24, 0x03	; 3
 984:	e9 f4       	brne	.+58     	; 0x9c0 <__vector_21+0x88>
		{
			servo1 = adcval0 * 0.03 + 8;
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__floatunsisf>
 98e:	2f e8       	ldi	r18, 0x8F	; 143
 990:	32 ec       	ldi	r19, 0xC2	; 194
 992:	45 ef       	ldi	r20, 0xF5	; 245
 994:	5c e3       	ldi	r21, 0x3C	; 60
 996:	0e 94 f1 06 	call	0xde2	; 0xde2 <__mulsf3>
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	40 e0       	ldi	r20, 0x00	; 0
 9a0:	51 e4       	ldi	r21, 0x41	; 65
 9a2:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3>
 9a6:	6b 01       	movw	r12, r22
 9a8:	7c 01       	movw	r14, r24
 9aa:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 9ae:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <servo1>
			updateDutyCycle2A(adcval0 * 0.03 + 8);
 9b2:	c7 01       	movw	r24, r14
 9b4:	b6 01       	movw	r22, r12
 9b6:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 9ba:	cb 01       	movw	r24, r22
 9bc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <updateDutyCycle2A>
		}
		channel = 1;
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <channel>
 9c6:	91 c0       	rjmp	.+290    	; 0xaea <__vector_21+0x1b2>
	}
	else if (channel == 1)
 9c8:	81 30       	cpi	r24, 0x01	; 1
 9ca:	79 f5       	brne	.+94     	; 0xa2a <__vector_21+0xf2>
	{
		// Servo 2
		adcval1 = ADC;
 9cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 9d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9d4:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <adcval1+0x1>
 9d8:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <adcval1>
		if (state == 1 || state == 3)
 9dc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__vector_21+0xb0>
 9e4:	83 30       	cpi	r24, 0x03	; 3
 9e6:	e9 f4       	brne	.+58     	; 0xa22 <__vector_21+0xea>
		{
			servo2 = adcval1 * 0.03 + 8;
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__floatunsisf>
 9f0:	2f e8       	ldi	r18, 0x8F	; 143
 9f2:	32 ec       	ldi	r19, 0xC2	; 194
 9f4:	45 ef       	ldi	r20, 0xF5	; 245
 9f6:	5c e3       	ldi	r21, 0x3C	; 60
 9f8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__mulsf3>
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	40 e0       	ldi	r20, 0x00	; 0
 a02:	51 e4       	ldi	r21, 0x41	; 65
 a04:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3>
 a08:	6b 01       	movw	r12, r22
 a0a:	7c 01       	movw	r14, r24
 a0c:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 a10:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <servo2>
			updateDutyCycle2B(adcval1 * 0.03 + 8);
 a14:	c7 01       	movw	r24, r14
 a16:	b6 01       	movw	r22, r12
 a18:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 a1c:	cb 01       	movw	r24, r22
 a1e:	0e 94 5f 02 	call	0x4be	; 0x4be <updateDutyCycle2B>
		}
		channel = 2;
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <channel>
 a28:	60 c0       	rjmp	.+192    	; 0xaea <__vector_21+0x1b2>
	}
	else if (channel == 2)
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	79 f5       	brne	.+94     	; 0xa8c <__vector_21+0x154>
	{
		// Servo 3
		adcval2 = ADC;
 a2e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 a32:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a36:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <adcval2+0x1>
 a3a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <adcval2>
		if (state == 1 || state == 3)
 a3e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 a42:	81 30       	cpi	r24, 0x01	; 1
 a44:	11 f0       	breq	.+4      	; 0xa4a <__vector_21+0x112>
 a46:	83 30       	cpi	r24, 0x03	; 3
 a48:	e9 f4       	brne	.+58     	; 0xa84 <__vector_21+0x14c>
		{
			servo3 = adcval2 * 0.03 + 8;
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__floatunsisf>
 a52:	2f e8       	ldi	r18, 0x8F	; 143
 a54:	32 ec       	ldi	r19, 0xC2	; 194
 a56:	45 ef       	ldi	r20, 0xF5	; 245
 a58:	5c e3       	ldi	r21, 0x3C	; 60
 a5a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__mulsf3>
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	40 e0       	ldi	r20, 0x00	; 0
 a64:	51 e4       	ldi	r21, 0x41	; 65
 a66:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3>
 a6a:	6b 01       	movw	r12, r22
 a6c:	7c 01       	movw	r14, r24
 a6e:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 a72:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <servo3>
			updateDutyCycle0A(adcval2 * 0.03 + 8);
 a76:	c7 01       	movw	r24, r14
 a78:	b6 01       	movw	r22, r12
 a7a:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 a7e:	cb 01       	movw	r24, r22
 a80:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateDutyCycle0A>
		}
		
		channel = 3;
 a84:	83 e0       	ldi	r24, 0x03	; 3
 a86:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <channel>
 a8a:	2f c0       	rjmp	.+94     	; 0xaea <__vector_21+0x1b2>
	}
	else if (channel == 3)
 a8c:	83 30       	cpi	r24, 0x03	; 3
 a8e:	69 f5       	brne	.+90     	; 0xaea <__vector_21+0x1b2>
	{
		// Servo 4
		adcval3 = ADC;
 a90:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 a94:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 a98:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <adcval3+0x1>
 a9c:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <adcval3>
		if (state == 1 || state == 3)
 aa0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <state>
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	11 f0       	breq	.+4      	; 0xaac <__vector_21+0x174>
 aa8:	83 30       	cpi	r24, 0x03	; 3
 aaa:	e9 f4       	brne	.+58     	; 0xae6 <__vector_21+0x1ae>
		{
			servo4 = adcval3 * 0.03 + 8;
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__floatunsisf>
 ab4:	2f e8       	ldi	r18, 0x8F	; 143
 ab6:	32 ec       	ldi	r19, 0xC2	; 194
 ab8:	45 ef       	ldi	r20, 0xF5	; 245
 aba:	5c e3       	ldi	r21, 0x3C	; 60
 abc:	0e 94 f1 06 	call	0xde2	; 0xde2 <__mulsf3>
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	51 e4       	ldi	r21, 0x41	; 65
 ac8:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3>
 acc:	6b 01       	movw	r12, r22
 ace:	7c 01       	movw	r14, r24
 ad0:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 ad4:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <servo4>
			updateDutyCycle0B(adcval3 * 0.03 + 8);
 ad8:	c7 01       	movw	r24, r14
 ada:	b6 01       	movw	r22, r12
 adc:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixunssfsi>
 ae0:	cb 01       	movw	r24, r22
 ae2:	0e 94 98 01 	call	0x330	; 0x330 <updateDutyCycle0B>
		}
		channel = 0;
 ae6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <channel>
	}

	// Configure next channel and start conversion
	configChannel(channel);
 aea:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <channel>
 aee:	0e 94 cb 00 	call	0x196	; 0x196 <configChannel>
	ADCSRA |= (1 << ADSC);
 af2:	ea e7       	ldi	r30, 0x7A	; 122
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	80 64       	ori	r24, 0x40	; 64
 afa:	80 83       	st	Z, r24
	writeChar(',');
	writeChar(angle3);
	writeChar(',');
	writeChar(angle4);
	writeChar('\n');*/
}
 afc:	ff 91       	pop	r31
 afe:	ef 91       	pop	r30
 b00:	bf 91       	pop	r27
 b02:	af 91       	pop	r26
 b04:	9f 91       	pop	r25
 b06:	8f 91       	pop	r24
 b08:	7f 91       	pop	r23
 b0a:	6f 91       	pop	r22
 b0c:	5f 91       	pop	r21
 b0e:	4f 91       	pop	r20
 b10:	3f 91       	pop	r19
 b12:	2f 91       	pop	r18
 b14:	ff 90       	pop	r15
 b16:	ef 90       	pop	r14
 b18:	df 90       	pop	r13
 b1a:	cf 90       	pop	r12
 b1c:	0f 90       	pop	r0
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	0f 90       	pop	r0
 b22:	1f 90       	pop	r1
 b24:	18 95       	reti

00000b26 <__vector_18>:

ISR(USART_RX_vect)
{
 b26:	1f 92       	push	r1
 b28:	0f 92       	push	r0
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	0f 92       	push	r0
 b2e:	11 24       	eor	r1, r1
 b30:	8f 93       	push	r24
	// Set the variable for further control
	rxintFlag = 1;
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rxintFlag>
	caracterIN = UDR0;
 b38:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b3c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <caracterIN>
}
 b40:	8f 91       	pop	r24
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

00000b4c <__vector_3>:

ISR(PCINT0_vect)
{
 b4c:	1f 92       	push	r1
 b4e:	0f 92       	push	r0
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	0f 92       	push	r0
 b54:	11 24       	eor	r1, r1
 b56:	8f 93       	push	r24
	// Set the variable for further control
	pcintFlag = 1;
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <pcintFlag>
	buttonstate0 = PINB;
 b5e:	83 b1       	in	r24, 0x03	; 3
 b60:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <buttonstate0>
}
 b64:	8f 91       	pop	r24
 b66:	0f 90       	pop	r0
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	0f 90       	pop	r0
 b6c:	1f 90       	pop	r1
 b6e:	18 95       	reti

00000b70 <__vector_5>:

ISR(PCINT2_vect)
{
 b70:	1f 92       	push	r1
 b72:	0f 92       	push	r0
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	0f 92       	push	r0
 b78:	11 24       	eor	r1, r1
 b7a:	8f 93       	push	r24
	buttonstate2 = PIND;
 b7c:	89 b1       	in	r24, 0x09	; 9
 b7e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <buttonstate2>
}
 b82:	8f 91       	pop	r24
 b84:	0f 90       	pop	r0
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	0f 90       	pop	r0
 b8a:	1f 90       	pop	r1
 b8c:	18 95       	reti

00000b8e <__subsf3>:
 b8e:	50 58       	subi	r21, 0x80	; 128

00000b90 <__addsf3>:
 b90:	bb 27       	eor	r27, r27
 b92:	aa 27       	eor	r26, r26
 b94:	0e 94 df 05 	call	0xbbe	; 0xbbe <__addsf3x>
 b98:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_round>
 b9c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_pscA>
 ba0:	38 f0       	brcs	.+14     	; 0xbb0 <__addsf3+0x20>
 ba2:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscB>
 ba6:	20 f0       	brcs	.+8      	; 0xbb0 <__addsf3+0x20>
 ba8:	39 f4       	brne	.+14     	; 0xbb8 <__addsf3+0x28>
 baa:	9f 3f       	cpi	r25, 0xFF	; 255
 bac:	19 f4       	brne	.+6      	; 0xbb4 <__addsf3+0x24>
 bae:	26 f4       	brtc	.+8      	; 0xbb8 <__addsf3+0x28>
 bb0:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_nan>
 bb4:	0e f4       	brtc	.+2      	; 0xbb8 <__addsf3+0x28>
 bb6:	e0 95       	com	r30
 bb8:	e7 fb       	bst	r30, 7
 bba:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>

00000bbe <__addsf3x>:
 bbe:	e9 2f       	mov	r30, r25
 bc0:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_split3>
 bc4:	58 f3       	brcs	.-42     	; 0xb9c <__addsf3+0xc>
 bc6:	ba 17       	cp	r27, r26
 bc8:	62 07       	cpc	r22, r18
 bca:	73 07       	cpc	r23, r19
 bcc:	84 07       	cpc	r24, r20
 bce:	95 07       	cpc	r25, r21
 bd0:	20 f0       	brcs	.+8      	; 0xbda <__addsf3x+0x1c>
 bd2:	79 f4       	brne	.+30     	; 0xbf2 <__addsf3x+0x34>
 bd4:	a6 f5       	brtc	.+104    	; 0xc3e <__addsf3x+0x80>
 bd6:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_zero>
 bda:	0e f4       	brtc	.+2      	; 0xbde <__addsf3x+0x20>
 bdc:	e0 95       	com	r30
 bde:	0b 2e       	mov	r0, r27
 be0:	ba 2f       	mov	r27, r26
 be2:	a0 2d       	mov	r26, r0
 be4:	0b 01       	movw	r0, r22
 be6:	b9 01       	movw	r22, r18
 be8:	90 01       	movw	r18, r0
 bea:	0c 01       	movw	r0, r24
 bec:	ca 01       	movw	r24, r20
 bee:	a0 01       	movw	r20, r0
 bf0:	11 24       	eor	r1, r1
 bf2:	ff 27       	eor	r31, r31
 bf4:	59 1b       	sub	r21, r25
 bf6:	99 f0       	breq	.+38     	; 0xc1e <__addsf3x+0x60>
 bf8:	59 3f       	cpi	r21, 0xF9	; 249
 bfa:	50 f4       	brcc	.+20     	; 0xc10 <__addsf3x+0x52>
 bfc:	50 3e       	cpi	r21, 0xE0	; 224
 bfe:	68 f1       	brcs	.+90     	; 0xc5a <__addsf3x+0x9c>
 c00:	1a 16       	cp	r1, r26
 c02:	f0 40       	sbci	r31, 0x00	; 0
 c04:	a2 2f       	mov	r26, r18
 c06:	23 2f       	mov	r18, r19
 c08:	34 2f       	mov	r19, r20
 c0a:	44 27       	eor	r20, r20
 c0c:	58 5f       	subi	r21, 0xF8	; 248
 c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <__addsf3x+0x38>
 c10:	46 95       	lsr	r20
 c12:	37 95       	ror	r19
 c14:	27 95       	ror	r18
 c16:	a7 95       	ror	r26
 c18:	f0 40       	sbci	r31, 0x00	; 0
 c1a:	53 95       	inc	r21
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__addsf3x+0x52>
 c1e:	7e f4       	brtc	.+30     	; 0xc3e <__addsf3x+0x80>
 c20:	1f 16       	cp	r1, r31
 c22:	ba 0b       	sbc	r27, r26
 c24:	62 0b       	sbc	r22, r18
 c26:	73 0b       	sbc	r23, r19
 c28:	84 0b       	sbc	r24, r20
 c2a:	ba f0       	brmi	.+46     	; 0xc5a <__addsf3x+0x9c>
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	a1 f0       	breq	.+40     	; 0xc58 <__addsf3x+0x9a>
 c30:	ff 0f       	add	r31, r31
 c32:	bb 1f       	adc	r27, r27
 c34:	66 1f       	adc	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	c2 f7       	brpl	.-16     	; 0xc2c <__addsf3x+0x6e>
 c3c:	0e c0       	rjmp	.+28     	; 0xc5a <__addsf3x+0x9c>
 c3e:	ba 0f       	add	r27, r26
 c40:	62 1f       	adc	r22, r18
 c42:	73 1f       	adc	r23, r19
 c44:	84 1f       	adc	r24, r20
 c46:	48 f4       	brcc	.+18     	; 0xc5a <__addsf3x+0x9c>
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	b7 95       	ror	r27
 c50:	f7 95       	ror	r31
 c52:	9e 3f       	cpi	r25, 0xFE	; 254
 c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0x9a>
 c56:	b0 cf       	rjmp	.-160    	; 0xbb8 <__addsf3+0x28>
 c58:	93 95       	inc	r25
 c5a:	88 0f       	add	r24, r24
 c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0xa2>
 c5e:	99 27       	eor	r25, r25
 c60:	ee 0f       	add	r30, r30
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	08 95       	ret

00000c68 <__fixunssfsi>:
 c68:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_splitA>
 c6c:	88 f0       	brcs	.+34     	; 0xc90 <__fixunssfsi+0x28>
 c6e:	9f 57       	subi	r25, 0x7F	; 127
 c70:	98 f0       	brcs	.+38     	; 0xc98 <__fixunssfsi+0x30>
 c72:	b9 2f       	mov	r27, r25
 c74:	99 27       	eor	r25, r25
 c76:	b7 51       	subi	r27, 0x17	; 23
 c78:	b0 f0       	brcs	.+44     	; 0xca6 <__fixunssfsi+0x3e>
 c7a:	e1 f0       	breq	.+56     	; 0xcb4 <__fixunssfsi+0x4c>
 c7c:	66 0f       	add	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	88 1f       	adc	r24, r24
 c82:	99 1f       	adc	r25, r25
 c84:	1a f0       	brmi	.+6      	; 0xc8c <__fixunssfsi+0x24>
 c86:	ba 95       	dec	r27
 c88:	c9 f7       	brne	.-14     	; 0xc7c <__fixunssfsi+0x14>
 c8a:	14 c0       	rjmp	.+40     	; 0xcb4 <__fixunssfsi+0x4c>
 c8c:	b1 30       	cpi	r27, 0x01	; 1
 c8e:	91 f0       	breq	.+36     	; 0xcb4 <__fixunssfsi+0x4c>
 c90:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_zero>
 c94:	b1 e0       	ldi	r27, 0x01	; 1
 c96:	08 95       	ret
 c98:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_zero>
 c9c:	67 2f       	mov	r22, r23
 c9e:	78 2f       	mov	r23, r24
 ca0:	88 27       	eor	r24, r24
 ca2:	b8 5f       	subi	r27, 0xF8	; 248
 ca4:	39 f0       	breq	.+14     	; 0xcb4 <__fixunssfsi+0x4c>
 ca6:	b9 3f       	cpi	r27, 0xF9	; 249
 ca8:	cc f3       	brlt	.-14     	; 0xc9c <__fixunssfsi+0x34>
 caa:	86 95       	lsr	r24
 cac:	77 95       	ror	r23
 cae:	67 95       	ror	r22
 cb0:	b3 95       	inc	r27
 cb2:	d9 f7       	brne	.-10     	; 0xcaa <__fixunssfsi+0x42>
 cb4:	3e f4       	brtc	.+14     	; 0xcc4 <__fixunssfsi+0x5c>
 cb6:	90 95       	com	r25
 cb8:	80 95       	com	r24
 cba:	70 95       	com	r23
 cbc:	61 95       	neg	r22
 cbe:	7f 4f       	sbci	r23, 0xFF	; 255
 cc0:	8f 4f       	sbci	r24, 0xFF	; 255
 cc2:	9f 4f       	sbci	r25, 0xFF	; 255
 cc4:	08 95       	ret

00000cc6 <__floatunsisf>:
 cc6:	e8 94       	clt
 cc8:	09 c0       	rjmp	.+18     	; 0xcdc <__floatsisf+0x12>

00000cca <__floatsisf>:
 cca:	97 fb       	bst	r25, 7
 ccc:	3e f4       	brtc	.+14     	; 0xcdc <__floatsisf+0x12>
 cce:	90 95       	com	r25
 cd0:	80 95       	com	r24
 cd2:	70 95       	com	r23
 cd4:	61 95       	neg	r22
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255
 cd8:	8f 4f       	sbci	r24, 0xFF	; 255
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	99 23       	and	r25, r25
 cde:	a9 f0       	breq	.+42     	; 0xd0a <__floatsisf+0x40>
 ce0:	f9 2f       	mov	r31, r25
 ce2:	96 e9       	ldi	r25, 0x96	; 150
 ce4:	bb 27       	eor	r27, r27
 ce6:	93 95       	inc	r25
 ce8:	f6 95       	lsr	r31
 cea:	87 95       	ror	r24
 cec:	77 95       	ror	r23
 cee:	67 95       	ror	r22
 cf0:	b7 95       	ror	r27
 cf2:	f1 11       	cpse	r31, r1
 cf4:	f8 cf       	rjmp	.-16     	; 0xce6 <__floatsisf+0x1c>
 cf6:	fa f4       	brpl	.+62     	; 0xd36 <__floatsisf+0x6c>
 cf8:	bb 0f       	add	r27, r27
 cfa:	11 f4       	brne	.+4      	; 0xd00 <__floatsisf+0x36>
 cfc:	60 ff       	sbrs	r22, 0
 cfe:	1b c0       	rjmp	.+54     	; 0xd36 <__floatsisf+0x6c>
 d00:	6f 5f       	subi	r22, 0xFF	; 255
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	8f 4f       	sbci	r24, 0xFF	; 255
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	16 c0       	rjmp	.+44     	; 0xd36 <__floatsisf+0x6c>
 d0a:	88 23       	and	r24, r24
 d0c:	11 f0       	breq	.+4      	; 0xd12 <__floatsisf+0x48>
 d0e:	96 e9       	ldi	r25, 0x96	; 150
 d10:	11 c0       	rjmp	.+34     	; 0xd34 <__floatsisf+0x6a>
 d12:	77 23       	and	r23, r23
 d14:	21 f0       	breq	.+8      	; 0xd1e <__floatsisf+0x54>
 d16:	9e e8       	ldi	r25, 0x8E	; 142
 d18:	87 2f       	mov	r24, r23
 d1a:	76 2f       	mov	r23, r22
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <__floatsisf+0x5e>
 d1e:	66 23       	and	r22, r22
 d20:	71 f0       	breq	.+28     	; 0xd3e <__floatsisf+0x74>
 d22:	96 e8       	ldi	r25, 0x86	; 134
 d24:	86 2f       	mov	r24, r22
 d26:	70 e0       	ldi	r23, 0x00	; 0
 d28:	60 e0       	ldi	r22, 0x00	; 0
 d2a:	2a f0       	brmi	.+10     	; 0xd36 <__floatsisf+0x6c>
 d2c:	9a 95       	dec	r25
 d2e:	66 0f       	add	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	da f7       	brpl	.-10     	; 0xd2c <__floatsisf+0x62>
 d36:	88 0f       	add	r24, r24
 d38:	96 95       	lsr	r25
 d3a:	87 95       	ror	r24
 d3c:	97 f9       	bld	r25, 7
 d3e:	08 95       	ret

00000d40 <__fp_inf>:
 d40:	97 f9       	bld	r25, 7
 d42:	9f 67       	ori	r25, 0x7F	; 127
 d44:	80 e8       	ldi	r24, 0x80	; 128
 d46:	70 e0       	ldi	r23, 0x00	; 0
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	08 95       	ret

00000d4c <__fp_nan>:
 d4c:	9f ef       	ldi	r25, 0xFF	; 255
 d4e:	80 ec       	ldi	r24, 0xC0	; 192
 d50:	08 95       	ret

00000d52 <__fp_pscA>:
 d52:	00 24       	eor	r0, r0
 d54:	0a 94       	dec	r0
 d56:	16 16       	cp	r1, r22
 d58:	17 06       	cpc	r1, r23
 d5a:	18 06       	cpc	r1, r24
 d5c:	09 06       	cpc	r0, r25
 d5e:	08 95       	ret

00000d60 <__fp_pscB>:
 d60:	00 24       	eor	r0, r0
 d62:	0a 94       	dec	r0
 d64:	12 16       	cp	r1, r18
 d66:	13 06       	cpc	r1, r19
 d68:	14 06       	cpc	r1, r20
 d6a:	05 06       	cpc	r0, r21
 d6c:	08 95       	ret

00000d6e <__fp_round>:
 d6e:	09 2e       	mov	r0, r25
 d70:	03 94       	inc	r0
 d72:	00 0c       	add	r0, r0
 d74:	11 f4       	brne	.+4      	; 0xd7a <__fp_round+0xc>
 d76:	88 23       	and	r24, r24
 d78:	52 f0       	brmi	.+20     	; 0xd8e <__fp_round+0x20>
 d7a:	bb 0f       	add	r27, r27
 d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fp_round+0x20>
 d7e:	bf 2b       	or	r27, r31
 d80:	11 f4       	brne	.+4      	; 0xd86 <__fp_round+0x18>
 d82:	60 ff       	sbrs	r22, 0
 d84:	04 c0       	rjmp	.+8      	; 0xd8e <__fp_round+0x20>
 d86:	6f 5f       	subi	r22, 0xFF	; 255
 d88:	7f 4f       	sbci	r23, 0xFF	; 255
 d8a:	8f 4f       	sbci	r24, 0xFF	; 255
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	08 95       	ret

00000d90 <__fp_split3>:
 d90:	57 fd       	sbrc	r21, 7
 d92:	90 58       	subi	r25, 0x80	; 128
 d94:	44 0f       	add	r20, r20
 d96:	55 1f       	adc	r21, r21
 d98:	59 f0       	breq	.+22     	; 0xdb0 <__fp_splitA+0x10>
 d9a:	5f 3f       	cpi	r21, 0xFF	; 255
 d9c:	71 f0       	breq	.+28     	; 0xdba <__fp_splitA+0x1a>
 d9e:	47 95       	ror	r20

00000da0 <__fp_splitA>:
 da0:	88 0f       	add	r24, r24
 da2:	97 fb       	bst	r25, 7
 da4:	99 1f       	adc	r25, r25
 da6:	61 f0       	breq	.+24     	; 0xdc0 <__fp_splitA+0x20>
 da8:	9f 3f       	cpi	r25, 0xFF	; 255
 daa:	79 f0       	breq	.+30     	; 0xdca <__fp_splitA+0x2a>
 dac:	87 95       	ror	r24
 dae:	08 95       	ret
 db0:	12 16       	cp	r1, r18
 db2:	13 06       	cpc	r1, r19
 db4:	14 06       	cpc	r1, r20
 db6:	55 1f       	adc	r21, r21
 db8:	f2 cf       	rjmp	.-28     	; 0xd9e <__fp_split3+0xe>
 dba:	46 95       	lsr	r20
 dbc:	f1 df       	rcall	.-30     	; 0xda0 <__fp_splitA>
 dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <__fp_splitA+0x30>
 dc0:	16 16       	cp	r1, r22
 dc2:	17 06       	cpc	r1, r23
 dc4:	18 06       	cpc	r1, r24
 dc6:	99 1f       	adc	r25, r25
 dc8:	f1 cf       	rjmp	.-30     	; 0xdac <__fp_splitA+0xc>
 dca:	86 95       	lsr	r24
 dcc:	71 05       	cpc	r23, r1
 dce:	61 05       	cpc	r22, r1
 dd0:	08 94       	sec
 dd2:	08 95       	ret

00000dd4 <__fp_zero>:
 dd4:	e8 94       	clt

00000dd6 <__fp_szero>:
 dd6:	bb 27       	eor	r27, r27
 dd8:	66 27       	eor	r22, r22
 dda:	77 27       	eor	r23, r23
 ddc:	cb 01       	movw	r24, r22
 dde:	97 f9       	bld	r25, 7
 de0:	08 95       	ret

00000de2 <__mulsf3>:
 de2:	0e 94 04 07 	call	0xe08	; 0xe08 <__mulsf3x>
 de6:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_round>
 dea:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_pscA>
 dee:	38 f0       	brcs	.+14     	; 0xdfe <__mulsf3+0x1c>
 df0:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscB>
 df4:	20 f0       	brcs	.+8      	; 0xdfe <__mulsf3+0x1c>
 df6:	95 23       	and	r25, r21
 df8:	11 f0       	breq	.+4      	; 0xdfe <__mulsf3+0x1c>
 dfa:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
 dfe:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_nan>
 e02:	11 24       	eor	r1, r1
 e04:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_szero>

00000e08 <__mulsf3x>:
 e08:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_split3>
 e0c:	70 f3       	brcs	.-36     	; 0xdea <__mulsf3+0x8>

00000e0e <__mulsf3_pse>:
 e0e:	95 9f       	mul	r25, r21
 e10:	c1 f3       	breq	.-16     	; 0xe02 <__mulsf3+0x20>
 e12:	95 0f       	add	r25, r21
 e14:	50 e0       	ldi	r21, 0x00	; 0
 e16:	55 1f       	adc	r21, r21
 e18:	62 9f       	mul	r22, r18
 e1a:	f0 01       	movw	r30, r0
 e1c:	72 9f       	mul	r23, r18
 e1e:	bb 27       	eor	r27, r27
 e20:	f0 0d       	add	r31, r0
 e22:	b1 1d       	adc	r27, r1
 e24:	63 9f       	mul	r22, r19
 e26:	aa 27       	eor	r26, r26
 e28:	f0 0d       	add	r31, r0
 e2a:	b1 1d       	adc	r27, r1
 e2c:	aa 1f       	adc	r26, r26
 e2e:	64 9f       	mul	r22, r20
 e30:	66 27       	eor	r22, r22
 e32:	b0 0d       	add	r27, r0
 e34:	a1 1d       	adc	r26, r1
 e36:	66 1f       	adc	r22, r22
 e38:	82 9f       	mul	r24, r18
 e3a:	22 27       	eor	r18, r18
 e3c:	b0 0d       	add	r27, r0
 e3e:	a1 1d       	adc	r26, r1
 e40:	62 1f       	adc	r22, r18
 e42:	73 9f       	mul	r23, r19
 e44:	b0 0d       	add	r27, r0
 e46:	a1 1d       	adc	r26, r1
 e48:	62 1f       	adc	r22, r18
 e4a:	83 9f       	mul	r24, r19
 e4c:	a0 0d       	add	r26, r0
 e4e:	61 1d       	adc	r22, r1
 e50:	22 1f       	adc	r18, r18
 e52:	74 9f       	mul	r23, r20
 e54:	33 27       	eor	r19, r19
 e56:	a0 0d       	add	r26, r0
 e58:	61 1d       	adc	r22, r1
 e5a:	23 1f       	adc	r18, r19
 e5c:	84 9f       	mul	r24, r20
 e5e:	60 0d       	add	r22, r0
 e60:	21 1d       	adc	r18, r1
 e62:	82 2f       	mov	r24, r18
 e64:	76 2f       	mov	r23, r22
 e66:	6a 2f       	mov	r22, r26
 e68:	11 24       	eor	r1, r1
 e6a:	9f 57       	subi	r25, 0x7F	; 127
 e6c:	50 40       	sbci	r21, 0x00	; 0
 e6e:	9a f0       	brmi	.+38     	; 0xe96 <__mulsf3_pse+0x88>
 e70:	f1 f0       	breq	.+60     	; 0xeae <__mulsf3_pse+0xa0>
 e72:	88 23       	and	r24, r24
 e74:	4a f0       	brmi	.+18     	; 0xe88 <__mulsf3_pse+0x7a>
 e76:	ee 0f       	add	r30, r30
 e78:	ff 1f       	adc	r31, r31
 e7a:	bb 1f       	adc	r27, r27
 e7c:	66 1f       	adc	r22, r22
 e7e:	77 1f       	adc	r23, r23
 e80:	88 1f       	adc	r24, r24
 e82:	91 50       	subi	r25, 0x01	; 1
 e84:	50 40       	sbci	r21, 0x00	; 0
 e86:	a9 f7       	brne	.-22     	; 0xe72 <__mulsf3_pse+0x64>
 e88:	9e 3f       	cpi	r25, 0xFE	; 254
 e8a:	51 05       	cpc	r21, r1
 e8c:	80 f0       	brcs	.+32     	; 0xeae <__mulsf3_pse+0xa0>
 e8e:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
 e92:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_szero>
 e96:	5f 3f       	cpi	r21, 0xFF	; 255
 e98:	e4 f3       	brlt	.-8      	; 0xe92 <__mulsf3_pse+0x84>
 e9a:	98 3e       	cpi	r25, 0xE8	; 232
 e9c:	d4 f3       	brlt	.-12     	; 0xe92 <__mulsf3_pse+0x84>
 e9e:	86 95       	lsr	r24
 ea0:	77 95       	ror	r23
 ea2:	67 95       	ror	r22
 ea4:	b7 95       	ror	r27
 ea6:	f7 95       	ror	r31
 ea8:	e7 95       	ror	r30
 eaa:	9f 5f       	subi	r25, 0xFF	; 255
 eac:	c1 f7       	brne	.-16     	; 0xe9e <__mulsf3_pse+0x90>
 eae:	fe 2b       	or	r31, r30
 eb0:	88 0f       	add	r24, r24
 eb2:	91 1d       	adc	r25, r1
 eb4:	96 95       	lsr	r25
 eb6:	87 95       	ror	r24
 eb8:	97 f9       	bld	r25, 7
 eba:	08 95       	ret

00000ebc <_exit>:
 ebc:	f8 94       	cli

00000ebe <__stop_program>:
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <__stop_program>
